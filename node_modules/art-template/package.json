{
  "_args": [
    [
      {
        "raw": "art-template",
        "scope": null,
        "escapedName": "art-template",
        "name": "art-template",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\SelfDefinedBlog"
    ]
  ],
  "_from": "art-template@latest",
  "_id": "art-template@4.3.2",
  "_inCache": true,
  "_location": "/art-template",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/art-template-4.3.2.tgz_1492772985479_0.8164605889469385"
  },
  "_npmUser": {
    "name": "aui",
    "email": "1987.tangbin@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "art-template",
    "scope": null,
    "escapedName": "art-template",
    "name": "art-template",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/art-template/-/art-template-4.3.2.tgz",
  "_shasum": "07e2d71f19e32e52912b13053716caf22eb07134",
  "_shrinkwrap": null,
  "_spec": "art-template",
  "_where": "D:\\SelfDefinedBlog",
  "author": {
    "name": "tangbin",
    "email": "sugarpie.tang@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/aui/art-template/issues"
  },
  "dependencies": {
    "acorn": "^5.0.3",
    "detect-node": "^2.0.3",
    "escodegen": "^1.8.1",
    "estraverse": "^4.2.0",
    "html-minifier": "^3.4.3",
    "is-keyword-js": "^1.0.3",
    "js-tokens": "^3.0.1"
  },
  "description": "JavaScript Template Engine",
  "devDependencies": {
    "babel-core": "^6.24.0",
    "babel-loader": "^6.4.1",
    "babel-preset-es2015": "^6.24.0",
    "coveralls": "^2.13.0",
    "eslint": "^3.19.0",
    "eslint-loader": "^1.7.1",
    "istanbul": "^0.4.5",
    "mocha": "^3.2.0",
    "node-noop": "^1.0.0",
    "webpack": "^2.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "07e2d71f19e32e52912b13053716caf22eb07134",
    "tarball": "https://registry.npmjs.org/art-template/-/art-template-4.3.2.tgz"
  },
  "engines": {
    "node": ">= 4.0.0"
  },
  "files": [
    "lib/"
  ],
  "gitHead": "bd83a571ce403e8b71289a4014ec60da59b173a5",
  "homepage": "http://aui.github.com/art-template/",
  "keywords": [
    "template"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "aui",
      "email": "1987.tangbin@gmail.com"
    }
  ],
  "name": "art-template",
  "optionalDependencies": {},
  "readme": "# art-template\n\n[![NPM Version](https://img.shields.io/npm/v/art-template.svg)](https://npmjs.org/package/art-template)\n[![Node.js Version](https://img.shields.io/node/v/art-template.svg)](http://nodejs.org/download/)\n[![Travis-ci](https://travis-ci.org/aui/art-template.svg?branch=master)](https://travis-ci.org/aui/art-template)\n[![Coverage Status](https://coveralls.io/repos/github/aui/art-template/badge.svg?branch=master)](https://coveralls.io/github/aui/art-template?branch=master)\n\nart-template 是一个渲染性能出众模板引擎，无论在 NodeJS 还是在浏览器中都可以运行。\n\n![chart](https://cloud.githubusercontent.com/assets/1791748/24965783/aa044388-1fd7-11e7-9d45-43b0e7ff5d86.png)\n\n[在线速度测试](http://aui.github.io/art-template/example/web-test-speed/)\n\n## 特性\n\n* 基于编译优化，拥有极高的渲染性能\n* 支持编译、运行时调试，可定位语法、渲染错误的模板语句\n* 支持**高性能**压缩页面中的 HTML、CSS、JS 代码\n* 支持 NodeJS 与 浏览器。支持 Express、Koa、Webpack\n* 支持模板包含与模板继承\n* 兼容 [EJS](http://ejs.co)、[Underscore](http://underscorejs.org/#template)、[LoDash](https://lodash.com/docs/#template) 模板语法\n* 支持 ES 严格模式环境运行\n* 同时支持原生 JavaScript 语法、简约语法\n* 支持定义模板的语法规则\n* 浏览器版本仅 6KB 大小\n\n## 快速入门\n\n### 模板语法\n\n```html\n<% if (user) { %>\n  <h2><%= user.name %></h2>\n<% } %>\n\n或：\n\n{{if user}}\n  <h2>{{user.name}}</h2>\n{{/if}}\n```\n\n### NodeJS\n\n```js\nvar template = require('art-template');\nvar html = template(__diranme + '/tpl-user.art', {\n    user: {\n        name: 'aui'\n    }\n});\n```\n\n### Web\n\n1\\. 使用浏览器版本：[lib/template-web.js](https://raw.githubusercontent.com/aui/art-template/master/lib/template-web.js)\n\n2\\. 在页面中存放模板：\n\n```html\n<script id=\"tpl-user\" type=\"text/html\">\n<% if (user) { %>\n  <h2><%= user.name %></h2>\n<% } %>\n</script>\n```\n\n3\\. 渲染模板：\n\n```js\nvar html = template('tpl-user', {\n    user: {\n        name: 'aui'\n    }\n});\n```\n\n### 核心方法\n\n```js\n// 基于模板名渲染模板\ntemplate(filename, data);\n\n// 将模板源代码编译成函数\ntemplate.compile(source, options);\n\n// 将模板源代码编译成函数并立刻执行\ntemplate.render(source, data, options);\n```\n\n## 安装\n\n```shell\nnpm install art-template --save\n```\n\n## Express\n\n[express-art-template](https://github.com/aui/express-art-template)\n\n## Koa\n\n[koa-art-template](https://github.com/aui/koa-art-template)\n\n## Webpack\n\n[art-template-loader](https://github.com/aui/art-template-loader)\n\n## 语法\n\nart-template 同时支持 `{{expression}}` 简约语法与任意 JavaScript 表达式 `<% expression %>`。\n\n### 输出\n\n**1\\. 标准输出**\n\n```html\n{{value}}\n{{data.key}}\n{{data['key']}}\n{{a ? b : c}}\n{{a || b}}\n{{a + b}}\n\nor\n\n<%= value %>\n<%= data.key %>\n<%= data['key'] %>\n<%= a ? b : c %>\n<%= a || b %>\n<%= a + b %>\n```\n\n模板一级特殊变量可以使用 `$data` 加下标的方式访问：\n\n```\n{{$data['user list']}}\n```\n\n**2\\. 原始输出**\n\n```html\n{{@value}}\n\nor\n\n<%- value %>\n```\n\n原始输出语句不会对 `HTML` 内容进行转义\n\n### 条件\n\n```html\n{{if value}} ... {{/if}}\n{{if v1}} ... {{else if v2}} ... {{/if}}\n\nor\n\n<% if (value) { %> ... <% } %>\n<% if (value) { %> ... <% } else { %> ... <% } %>\n```\n\n### 循环\n\n```html\n{{each target}}\n    {{$index}} {{$value}}\n{{/each}}\n\nor\n\n<% for(var i = 0; i < target.length; i++){ %>\n    <%= i %> <%= target[i] %>\n<% } %>\n```\n\n1. `target` 支持 `Array` 与 `Object` 的迭代，其默认值为 `$data`\n2. `$value` 与 `$index` 可以自定义：`{{each target val key}}`\n\n### 变量\n\n```html\n{{set temp = data.sub.content}}\n\nor\n\n<% var temp = data.sub.content; %> \n```\n\n### 子模板\n\n```html\n{{include './header.art'}}\n{{include './header.art' data}}\n\nor\n\n<% include('./header.art') %>\n<% include('./header.art', data) %>\n```\n\n`include` 第二个参数默认值为 `$data`。\n\n### 布局\n\n```html\n{{extend './layout.art'}}\n{{block 'head'}} ... {{/block}}\n```\n\n模板继承允许你构建一个包含你站点共同元素的基本模板“骨架”。\n\n#### 范例\n\nlayout.art:\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>{{block 'title'}}My Site{{/block}}</title>\n\n    {{block 'head'}}\n    <link rel=\"stylesheet\" href=\"main.css\">\n    {{/block}}\n</head>\n<body>\n    {{block 'content'}}{{/block}}\n</body>\n</html>\n```\n\nindex.art:\n\n```html\n{{extend './layout.art'}}\n\n{{block 'title'}}{{title}}{{/block}}\n\n{{block 'head'}}\n    <link rel=\"stylesheet\" href=\"custom.css\">\n{{/block}}\n\n{{block 'content'}}\n<p>This is just an awesome page.</p>\n{{/block}}\n```\n\n渲染 index.art 后，将自动应用布局骨架。\n\n### print\n\n```html\n<% print(val, val2, val3) %>\n```\n\n### 过滤器\n\n```js\n// 向模板中导入全局变量\ntemplate.defaults.imports.$dateFormat = function(date, format){/*[code..]*/};\ntemplate.defaults.imports.$timestamp = function(value){return value * 1000};\n```\n\n因为 `imports` 定义的全局变量的优先级会比普通模板变量高，所以建议命名使用 `$` 前缀。 \n\n```html\n{{date | $timestamp | $dateFormat 'yyyy-MM-dd hh:mm:ss'}}\n\nor\n\n<%= $dateFormat($timestamp(date), 'yyyy-MM-dd hh:mm:ss') %>\n```\n\n`{{value | filter}}` 过滤器语法类似管道操作符，它的上一个输出作为下一个输入。\n\n## 压缩 HTML、CSS、JS\n\n```js\ntemplate.defaults.minimize = true;\n```\n\nart-template 的页面压缩功能是在编译阶段实现的，因此完全不影响渲染速度，并且能够加快网络传输速度。但也有一个限制，它不能正常处理未闭合的 HTML 标签，因此使用 `include` 语句载入模板片段的时候请小心。\n\n请避免书写这样的模板：\n\n```html\n<body>\n```\n或：\n\n```html\n</body></html>\n```\n\n使用 [布局](#布局) 代替 `include` 可以避免这样的问题出现。\n\n## 调试\n\n设置 `template.defaults.debug=true` 后，它会设置如下选项：\n\n```json\n{\n    \"bail\": false,\n    \"cache\": false,\n    \"minimize\": false,\n    \"compileDebug\": true\n}\n```\n\n`debug` 默认配置：\n\n* Node 环境 = `process.env.NODE_ENV !== 'production'`\n* 浏览器环境 = `false`\n\n## 全局变量\n\n### 内置变量清单\n\n* `$data`     传入模板的数据 `{Object|array}`\n* `$imports`  外部导入的所有变量，等同 `template.defaults.imports` `{Object}`\n* `print`     字符串输出函数 `{function}`\n* `include`   子模板载入函数 `{function}`\n* `extend`    布局模板导入函数 `{function}`\n* `block`     模板块声明函数 `{function}`\n\n### 注入全局变量\n\n```js\ntemplate.defaults.imports.$console = console;\n```\n\n```html\n<% $console.log('hello world') %>\n```\n\n模板外部所有的变量都需要使用 `template.defaults.imports` 注入、并且要在模板编译之前进行声明才能使用。\n\n## 定义语法规则\n\n从一个简单的例子说起，让模板引擎支持 ES6 `${name}` 模板字符串的解析：\n\n```js\ntemplate.defaults.rules.push({\n    test: /\\${([\\w\\W]*?)}/,\n    use: function(match, code) {\n        return {\n            code: code,\n            output: 'escape'\n        }\n    }\n});\n```\n\n其中 `test` 是匹配字符串正则，`use` 是匹配后的调用函数。关于 `use` 函数：\n\n* 参数：一个参数为匹配到的字符串，其余的参数依次接收 `test` 正则的分组匹配内容\n* 返回值：必须返回一个对象，包含 `code` 与 `output` 两个字段：\n    * `code` 转换后的 JavaScript 语句\n    * `output` 描述 `code` 的类型，可选值：\n        * `'escape'` 编码后进行输出\n        * `'raw'` 输出原始内容\n        * `false` 不输出任何内容\n\n## 使用 `require(templatePath)`\n\n加载 `.art` 模板：\n\n```js\nvar template = require('art-template');\nvar view = require('./index.art');\nvar html = view(data); \n```\n\n加载 `.ejs` 模板：\n\n```js\nvar template = require('art-template');\nrequire.extensions['.ejs'] = template.extension;\n\nvar view = require('./index.ejs');\nvar html = view(data); \n```\n\n## API\n\n###\ttemplate(filename, data)\n\n根据模板名渲染模板。\n\n```js\nvar html = template('/welcome.art', {\n    value: 'aui'\n});\n```\n\n> 在浏览器中，`filename` 请传入存放模板的元素 `id`\n\n###\ttemplate(filename, source)\n\n编译模板并缓存。\n\n```js\n// compile && cache\ntemplate('/welcome.art', 'hi, <%=value%>.');\n\n// use\ntemplate('/welcome.art', {\n    value: 'aui'\n});\n```\n\n###\t.compile(source, options)\n\n编译模板并返回一个渲染函数。\n\n```js\nvar render = template.compile('hi, <%=value%>.');\nvar html = render({value: 'aui'});\n```\n\n###\t.render(source, data, options)\n\n编译并返回渲染结果。\n\n```js\nvar html = template.render('hi, <%=value%>.', {value: 'aui'});\n```\n\n###\t.defaults\n\n模板引擎默认配置。参考 [选项](#选项)。\n\n## 选项\n\n`template.defaults`\n\n```js\n{\n    // 模板名字\n    filename: null,\n\n    // 模板语法规则列表\n    rules: [nativeRule, artRule],\n\n    // 是否支持对模板输出语句进行编码。为 false 则关闭编码输出功能\n    escape: true,\n\n    // 是否开启调试模式。如果为 true: {bail:false, cache:false, minimize:false, compileDebug:true}\n    debug: detectNode ? process.env.NODE_ENV !== 'production' : false,\n\n    // bail 如果为 true，编译错误与运行时错误都会抛出异常\n    bail: false,\n\n    // 是否开启缓存\n    cache: true,\n\n    // 是否开启压缩。它会运行 htmlMinifier，将页面 HTML、CSS、CSS 进行压缩输出\n    // 模板 include 语句引入的子模板不会生效\n    minimize: true,\n\n    // 是否编译调试版。编译为调试版本可以在运行时进行 DEBUG\n    compileDebug: false,\n\n    // 模板路径转换器\n    resolveFilename: resolveFilename,\n\n    // HTML 压缩器。仅在 NodeJS 环境下有效\n    htmlMinifier: htmlMinifier,\n\n    // 错误调试器\n    onerror: onerror,\n\n    // 模板文件加载器\n    loader: loader,\n\n    // 缓存中心适配器（依赖 filename 字段）\n    caches: caches,\n\n    // 模板根目录。如果 filename 为全局路径，则会基于此查找模板\n    root: '/',\n\n    // 默认后缀名。如果没有后缀名，则会自动基于此补全\n    extname: '.art',\n\n    // 导入的模板变量\n    imports: {\n        $each: each,\n        $escape: escape,\n        $include: include\n    }\n};\n```\n\n## 兼容性\n\n1. NodeJS v1.0+\n2. IE9+（art-template@4 基于 ES5，小于 IE9 的浏览器需要 [es5-shim](https://github.com/es-shims/es5-shim) 和 [JSON](https://github.com/douglascrockford/JSON-js) 才可运行）\n\n## 授权协议\n\n[MIT](./LICENSE)",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/aui/art-template.git"
  },
  "scripts": {
    "build": "webpack",
    "coverage": "cat ./coverage/lcov.info | coveralls",
    "dev": "export BUILD_TARGET=node && webpack -w",
    "test": "export NODE_ENV=production && istanbul cover node_modules/mocha/bin/_mocha -- --ui exports --colors 'test/**/*.js' && npm run test-node",
    "test-node": "mocha --ui exports test/node.es"
  },
  "version": "4.3.2"
}
